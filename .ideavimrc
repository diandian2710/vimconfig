
" ================================================================================================
" = Extensions =====================================
" ================================================================================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set showmode
set hlsearch
set incsearch
set smartcase
set ignorecase
" show relative number and  current line number
set relativenumber
set number
set clipboard+=unnamed
set ideajoin
" set quickscope
set quickscope
" ================================================================================================
" = No Leader Keymaps =====================================
"================================================================================================
" window move
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

nnoremap <C-o> gi
nmap gd <action>(GotoDeclaration)
nmap gi <action>(GotoImplementation)
nmap gu <action>(GotoSuperMethod)
nmap g] <action>(GotoNextError)
nmap g[ <action>(GotoPreviousError)
nmap gt <action>(GotoTest)
nmap gm <action>(MethodUp)
" last changed in current buffer(file)
nmap ga '.
" bookmark in whole program
nmap ma mA
nmap 'a 'A
nmap ms mS
nmap 's 'S
nmap md mD
nmap 'd 'D
nmap mf mF
nmap 'f 'F
" go to start or end of the line
nnoremap L $
nnoremap H ^
vnoremap L $
vnoremap H ^
nnoremap ; :
inoremap jk <Esc>`^
" tab operation
nnoremap <S-k> gt
nnoremap <S-j> gT
" yank func
nnoremap yf va{V
" undo
nnoremap U <c-r>
" TAB in general mode will move to text buffer
nnoremap <TAB> :bnext<CR>
" y to end
nnoremap yk y$
" y to begin
nnoremap yj y^
" multiple-cursors==================================================================
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
nmap <C-x> <Plug>SkipOccurrence
xmap <C-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
" ================================================================================================
" disable internal key
nnoremap s <Nop>
vnoremap <S-j> <Nop>
" easymotion
nmap ss <Plug>(easymotion-s2)
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=" "

nnoremap <leader>v :NERDTreeFind<CR>
nmap <Leader>em :action Refactorings.QuickListPopupAction<CR>
vmap <Leader>em :action Refactorings.QuickListPopupAction<CR>
" extract method/function
" vmap <leader>em <action>(ExtractMethod)
" extact constant
" vmap <leader>ec <action>(IntroduceConstant)
" extract field
" vmap <leader>ef <action>(IntroduceField)
" extract variable
" vmap <leader>ev <action>(IntroduceVariable)
" surround with
vmap <leader>wi <action>(SurroundWith)
" debug
nmap dp :action ToggleLineBreakpoint<CR>
nmap dj :action StepOver<CR>
nmap dh :action StepOut<CR>
nmap dl :action ForceStepInto<CR>
nmap dk <action>(Resume)
nmap de :action EvaluateExpression<CR>
" ================================================================================================
" üëªüëªüëª Which-Key üëªüëªüëª
" ================================================================================================
set which-key
set notimeout
" b bookmark
let g:WhichKeyDesc_Bookmarks = "<leader>b Bookmarks"
nnoremap <leader>b :action Bookmarks<CR>
" c: Close and Save ‚≠êÔ∏è;
let g:WhichKeyDesc_CloseOrSave = "<leader>c SaveOrClose"
let g:WhichKeyDesc_CloseBuffer = "<leader>cq CloseBuffer"
nmap <leader>cq :q!<CR>
let g:WhichKeyDesc_SaveBuffer = "<leader>cw SaveBuffer"
nmap <leader>cw :w<CR>
" d: debug
let g:WhichKeyDesc_Debug = "<leader>d Debug"
let g:WhichKeyDesc_Debug_Start = "<leader>db Start"
nmap <leader>db <action>(Debug)
let g:WhichKeyDesc_Debug_Stop = "<leader>ds Stop"
nmap <leader>ds <action>(Stop)

" f: Find/Format ‚≠êÔ∏è
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_RecentChangedFiles = "<leader>fr RCF"
nmap <leader>fr <action>(RecentChangedFiles)

let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>fw FindText"
nmap <leader>fw <action>(FindInPath)
vmap <leader>fw <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_FindClass = "<leader>fc FindClass"
nmap <leader>fc <action>(GotoClass)

let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fa FindAction"
nmap <leader>fa <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp OpenedProject"
nmap <leader>fp <action>(OpenProjectWindows)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

let g:WhichKeyDesc_FindOrFormat_Usage = "<leader>fu Usage"
nmap <leader>fu <action>(FindUsages)

let g:WhichKeyDesc_FindOrFormat_SearchEverywhere = "<leader>fs SearchEverywhere"
nmap <leader>fs <action>(SearchEverywhere)


" g: Git ‚≠êÔ∏è
let g:WhichKeyDesc_Git = "<leader>g Git"
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr RollbackHunk"
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>
let g:WhichKeyDesc_Git_Annotate = "<leader>ga Annotate"
nmap <leader>ga <action>(Annotate)
let g:WhichKeyDesc_Go_To_Symbol = "<leader>gs GotoRelated"
nmap <leader>gs <action>(GotoRelated)

" i: Insert ‚≠êÔ∏è
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>i f(a
" j: add Semicolon and goto next line‚≠êÔ∏è
let g:WhichKeyDesc_InsertSemicolon = "<leader>j InsertSemicolon"
nmap <leader>j A;<ESC>o

" p
let g:WhichKeyDesc_Prefix = "<leader>p Prefix"
nmap  <leader>p <Plug>(easymotion-prefix)

" r: Run/Re ‚≠êÔ∏è
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
nmap <leader>rn <action>(RenameElement)

" s: Show ‚≠êÔ∏è
let g:WhichKeyDesc_Show = "<leader>s Show"
let g:WhichKeyDesc_Show_FileStructure = "<leader>sf ShowFileStructure"
nmap <leader>sf <action>(FileStructurePopup)
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ShowBookmarks"
nmap <leader>sb <action>(ShowBookmarks)
let g:WhichKeyDesc_Show_JavaDoc = "<leader>sj ShowJavaDoc"
nmap <leader>sj <action>(QuickJavaDoc)
let g:WhichKeyDesc_Show_Highlight = "<leader>sc NoHighlight"
nmap <leader>sc :nohlsearch<CR>
let g:WhichKeyDesc_Show_Error = "<leader>se ShowError"
nmap <leader>se <action>(ShowErrorDescription)

" t: Tool
let g:WhichKeyDesc_Terminal = "<leader>t Tool"
let g:WhichKeyDesc_Terminal_Open = "<leader>tt Terminal"
nmap <leader>tt <action>(ActivateTerminalToolWindow)

" w: Window ‚≠êÔ∏è
let g:WhichKeyDesc_Windows = "<leader>w Windows"
let g:WhichKeyDesc_Windows_maximize = "<leader>wo maximize"
nmap <leader>wo <action>(UnsplitAll) \| <action>(HideAllWindows)
let g:WhichKeyDesc_Windows_splitWindowVertically = "<leader>wl splitWindowVertically"
nmap <leader>wl <action>(Macro.SplitVertically)
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>wc closeActiveWindow"
nmap <leader>wc <c-w>c

" z: zip(fold) ‚≠êÔ∏è
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <action>(CollapseAllRegions)
